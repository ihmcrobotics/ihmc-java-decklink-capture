plugins {
   id("us.ihmc.ihmc-build") version "0.20.1"
   id("org.hidetake.ssh") version "2.9.0"
   id("us.ihmc.ihmc-ci") version "5.3"
   id("us.ihmc.ihmc-cd") version "1.8"
   id("application")
}

ihmc {
   group = "us.ihmc"
   version = "0.3.2"
   vcsUrl = "https://github.com/ihmcrobotics/ihmc-java-decklink-capture"
   openSource = true

   configureDependencyResolution()
   javaDirectory("main", "../../src")
   resourceDirectory("main", "../../resources")
   configurePublications()
}

mainClassName = "us.ihmc.javadecklink.Stream"

mainDependencies
{
   compile("us.ihmc:ihmc-native-library-loader:1.2")
   compile("com.martiansoftware:jsap:2.1")
}

task captureTarget {
   doLast {
      def deployLoggerUserValue = project.hasProperty("deployLoggerUser") ? project.deployLoggerUser : "invalid"
      def deployLoggerPasswordValue = project.hasProperty("deployLoggerPassword") ? project.deployLoggerPassword : "invalid"
      def deployLoggerHostValue = project.hasProperty("deployLoggerHost") ? project.deployLoggerHost : "invalid"

      remotes.create('captureTarget') {
         host = deployLoggerHostValue
         user = deployLoggerUserValue
         password = deployLoggerPasswordValue
         knownHosts = allowAnyHosts
      }
   }
}

task deploy(dependsOn: [distTar, captureTarget]) {
   doLast {
      ssh.run {
         session(remotes.captureTarget) {
            project.logger.lifecycle("Copying java decklink capture to remote")
            def distTarFile = distTar.outputs.files.singleFile
            put from: distTarFile, into: "."

            project.logger.lifecycle("Untarring distribution on remote host")
            execute "tar xf ./${distTarFile.name}"
            project.logger.lifecycle("Removing tarball from remote host")
            execute "rm -f ./${distTarFile.name}"
            project.logger.lifecycle("Removing old version")
            execute "rm -rf Capture"
            project.logger.lifecycle("Moving Java Declink Capture distribution in to place")
            execute "mv ./${distTarFile.name.replace(".tar", "")} Capture"
            project.logger.lifecycle("Capture deployment to remote host complete!")
         }
      }
   }
}
